How did viewing a diff between two versions of a file help you see the bug that
was introduced?
观察一个文件的两个版本的不同是如何帮助你理解所提到bug的？
由于bug发生在新的版本里面，老的版本中不存在bug，我们需要对比新老文件，观察新老文件内容的不同，确定bug发生的原因是由更改的内容引起的。

---------------------------------------------------------------------------------
How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?
从长远来看，能轻松访问文件的整个历史记录将如何提高编程者的效率？
一个编程项目往往会随着时间的推移变得越来越大，设计到的代码和文件会越来越多，通过访问文件的历史记录，会比较方便的去追溯编程的一些历史，会比较容易发现问题。

---------------------------------------------------------------------------------
What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?
你认为，手动选择何时创建提交（像在 Git 中做的那样）与自动保存版本（如 Google Docs 所做的那样）各有何优缺点？
手动提交的优点是，可以在每次提交的时候留下备注，每一次的提交可以人为地控制为一个比较有意义的提交，比如说：我完成了一个功能，我提交一下；我更改某一个部分的几处语法错误，我提交一下；我修复一个bug。
手动提交的缺点是，比较麻烦，需要一定学习成本，需要养成学习习惯。
自动保存的优点是，方便。
自动保存的缺点是，电脑的保存原因不明确，或是定时，或是根据编辑量。

---------------------------------------------------------------------------------
Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?
为什么你认为一些版本控制系统（例如 Git）允许在一次提交中保存多个文件，而其他系统（例如 Google Docs）单独对待每个文件？
有时候我们的多个文件之间是存在关联的，一个文件的变化，会引发其他文件的变化，因而在版本控制系统当中，需要体现一个整体的变化情况，我们在提交的时候也要注意，以及我们将来追溯问题的时候，也需要注意到文件的关联性。
Google docs的设计是为了定期的保存文件不丢失，保证文件即使的保存，不考虑关联性的问题。

---------------------------------------------------------------------------------
How can you use the commands git log and git diff to view the history of files?
如何使用命令 git log 和 git diff 来查看文件的历史记录？
进入到repository的文件夹当中，我们查看历史纪录：
$ git log
或者：
$ git log --stat
我们可以中git log中观察整个日志，找到每个更改的主题以及其相关的id
我们用diff来查看历史纪录的变更内容：
$ git diff old_file_id new_file_id
弹出代码内容，用加号和减号分别表示新增和删减。

---------------------------------------------------------------------------------
How might using version control make you more confident to make changes that
could break something?
版本控制如何让你自信的做出有可能造成破坏的更改？
版本控制的git checkout让人可以方便的追溯以往的版本并进行测试，从而发现bug所出现的版本，bug好查找，放心更改。

---------------------------------------------------------------------------------
Now that you have your workspace set up, what do you want to try using Git for?

    Fill in your answer here



git config --global push.default upstream
git config --global merge.conflictstyle diff3
